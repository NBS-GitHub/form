{"version":3,"sources":["components/Button.js","components/Panel.js","components/App.js","serviceWorker.js","index.js"],"names":["Button","props","react_default","a","createElement","Fragment","onClick","click","text","Panel","count","result","App","state","action","this","setState","prevState","_this2","components_Button","handleClick","bind","components_Panel","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAceA,SAZA,SAAAC,GACX,OACIC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACIH,EAAAC,EAAAC,cAAA,UACIE,QAASL,EAAMM,OAEdN,EAAMO,SCKRC,EAXD,SAAAR,GAEV,OACIC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACIH,EAAAC,EAAAC,cAAA,4BAAoBH,EAAMS,OAC1BR,EAAAC,EAAAC,cAAA,qBAAaH,EAAMU,QAClBV,EAAMS,MAAQ,IAAMR,EAAAC,EAAAC,cAAA,SALb,oDCuELQ,6MApEbC,MAAQ,CACNH,MAAO,EACPC,OAAQ,8EAGEG,EAAQN,GAClBO,KAAKC,SAAS,SAAAC,GAAS,MAAK,CAC1BP,MAAOO,EAAUP,MAAQ,KAEZ,gBAAXI,EACW,QAATN,EACFO,KAAKC,SAAS,SAAAC,GAAS,MAAK,CAC1BN,OAAQM,EAAUN,OAAS,MAEX,OAATH,GACTO,KAAKC,SAAS,SAAAC,GAAS,MAAK,CAC1BN,OAAQM,EAAUN,OAAS,KAGX,aAAXG,EACI,OAATN,EACFO,KAAKC,SAAS,SAAAC,GAAS,MAAK,CAC1BN,OAAQM,EAAUN,OAAS,KAEX,QAATH,GACTO,KAAKC,SAAS,SAAAC,GAAS,MAAK,CAC1BN,OAAQM,EAAUN,OAAS,MAGX,UAAXG,GACTC,KAAKC,SAAS,SAAAC,GAAS,MAAK,CAC1BN,OAAQ,sCAKL,IAAAO,EAAAH,KACP,OACEb,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACEH,EAAAC,EAAAC,cAACe,EAAD,CACEZ,MAAOQ,KAAKK,YAAYC,KAAKN,KAAM,cAAe,OAClDP,KAAK,QAEPN,EAAAC,EAAAC,cAACe,EAAD,CACEZ,MAAO,kBAAMW,EAAKE,YAAY,cAAe,OAC7CZ,KAAK,OAEPN,EAAAC,EAAAC,cAACe,EAAD,CACEZ,MAAOQ,KAAKK,YAAYC,KAAKN,KAAM,SACnCP,KAAK,UAEPN,EAAAC,EAAAC,cAACe,EAAD,CACEZ,MAAOQ,KAAKK,YAAYC,KAAKN,KAAM,WAAY,MAC/CP,KAAK,OAEPN,EAAAC,EAAAC,cAACe,EAAD,CACEZ,MAAOQ,KAAKK,YAAYC,KAAKN,KAAM,WAAY,OAC/CP,KAAK,QAEPN,EAAAC,EAAAC,cAACkB,EAAD,CACEZ,MAAOK,KAAKF,MAAMH,MAClBC,OAAQI,KAAKF,MAAMF,iBA9DXY,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5B,EAAAC,EAAAC,cAAC2B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d9ee3adb.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Button = props => {\r\n    return (\r\n        <>\r\n            <button\r\n                onClick={props.click}\r\n            >\r\n                {props.text}\r\n            </button>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Button;","import React from 'react';\r\n\r\nconst Panel = props => {\r\n    const message = \"Result is more than 10 - stack overflow!!! omg\";\r\n    return (\r\n        <>\r\n            <h2>Click counter: {props.count}</h2>\r\n            <h2>Result: {props.result}</h2>\r\n            {props.count > 10 && <p>{message}</p>}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Panel;","import React, { Component } from 'react';\nimport './App.css';\nimport Button from './Button';\nimport Panel from './Panel';\n\nclass App extends Component {\n  state = {\n    count: 0,\n    result: 0\n  }\n\n  handleClick(action, text) {\n    this.setState(prevState => ({\n      count: prevState.count + 1,\n    }));\n    if (action === 'subtraction') {\n      if (text === '-10') {\n        this.setState(prevState => ({\n          result: prevState.result - 10\n        }));\n      } else if (text === '-1') {\n        this.setState(prevState => ({\n          result: prevState.result - 1\n        }));\n      }\n    } else if (action === 'addition') {\n      if (text === '+1') {\n        this.setState(prevState => ({\n          result: prevState.result + 1\n        }));\n      } else if (text === '+10') {\n        this.setState(prevState => ({\n          result: prevState.result + 10\n        }));\n      }\n    } else if (action === 'reset') {\n      this.setState(prevState => ({\n        result: 0\n      }));\n    }\n  }\n\n  render() {\n    return (\n      <>\n        <Button\n          click={this.handleClick.bind(this, 'subtraction', '-10')}\n          text='-10'\n        />\n        <Button\n          click={() => this.handleClick('subtraction', '-1')}\n          text='-1'\n        />\n        <Button\n          click={this.handleClick.bind(this, 'reset')}\n          text='Reset'\n        />\n        <Button\n          click={this.handleClick.bind(this, 'addition', '+1')}\n          text='+1'\n        />\n        <Button\n          click={this.handleClick.bind(this, 'addition', '+10')}\n          text='+10'\n        />\n        <Panel\n          count={this.state.count}\n          result={this.state.result}\n        />\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}