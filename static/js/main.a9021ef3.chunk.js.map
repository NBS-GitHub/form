{"version":3,"sources":["components/ListItem.js","components/List.js","components/Buttons.js","components/App.js","serviceWorker.js","index.js"],"names":["ListItem","props","react_default","a","createElement","className","concat","content","name","age","sex","List","users","map","user","components_ListItem","key","id","Buttons","value","onClick","click","App","state","_this","data","handleClick","e","target","filter","setState","prevState","Fragment","components_Buttons","this","components_List","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAYeA,SAVE,SAAAC,GACb,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,mBAAAE,OAAcL,EAAMM,QAAQC,OAC5BN,EAAAC,EAAAC,cAAA,kBAAAE,OAAaL,EAAMM,QAAQE,MAC3BP,EAAAC,EAAAC,cAAA,kBAAAE,OAAaL,EAAMM,QAAQG,SCExBC,EANF,SAAAV,GACT,OACIA,EAAMW,MAAMC,IAAI,SAAAC,GAAI,OAAIZ,EAAAC,EAAAC,cAACW,EAAD,CAAUR,QAASO,EAAME,IAAKF,EAAKG,QCQpDC,EAXC,SAAAjB,GAEZ,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,UAAQe,MAAM,OAAOC,QAASnB,EAAMoB,OAApC,YACAnB,EAAAC,EAAAC,cAAA,UAAQe,MAAM,OAAOC,QAASnB,EAAMoB,OAApC,aACAnB,EAAAC,EAAAC,cAAA,UAAQe,MAAM,SAASC,QAASnB,EAAMoB,OAAtC,iBCyBGC,6MA3BbC,MAAQ,CACNX,MAAOY,EAAKvB,MAAMwB,KAAKb,SAIzBc,YAAc,SAAAC,GACZ,IAAIf,EAAQY,EAAKvB,MAAMwB,KAAKb,MACL,WAAnBe,EAAEC,OAAOT,MACXP,EAAQA,EAAMiB,OAAO,SAAAf,GAAI,MAAiB,WAAbA,EAAKJ,MACN,SAAnBiB,EAAEC,OAAOT,QAClBP,EAAQA,EAAMiB,OAAO,SAAAf,GAAI,MAAiB,SAAbA,EAAKJ,OAEpCc,EAAKM,SAAS,SAAAC,GAAS,MAAK,CAC1BnB,oFAKF,OACEV,EAAAC,EAAAC,cAAAF,EAAAC,EAAA6B,SAAA,KACE9B,EAAAC,EAAAC,cAAC6B,EAAD,CAASZ,MAAOa,KAAKR,cACrBxB,EAAAC,EAAAC,cAAC+B,EAAD,CAAMvB,MAAOsB,KAAKX,MAAMX,gBAtBdwB,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCiBNC,IAASC,OAAOzC,EAAAC,EAAAC,cAACwC,EAAD,CAAKnB,KA7BR,CACTb,MAAO,CACH,CACIK,GAAI,EACJT,KAAM,QACNE,IAAK,OACLD,IAAK,IAET,CACIQ,GAAI,EACJT,KAAM,QACNE,IAAK,SACLD,IAAK,KAET,CACIQ,GAAI,EACJT,KAAM,QACNE,IAAK,OACLD,IAAK,IAET,CACIQ,GAAI,EACJT,KAAM,OACNE,IAAK,SACLD,IAAK,QAKoBoC,SAASC,eAAe,SD8FvD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a9021ef3.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst ListItem = props => {\r\n    return (\r\n        <div className='wrapper'>\r\n            <h2>{`Name: ${props.content.name}`}</h2>\r\n            <h3>{`Age: ${props.content.age}`}</h3>\r\n            <h3>{`Sex: ${props.content.sex}`}</h3>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ListItem;","import React from 'react';\r\nimport ListItem from './ListItem';\r\n\r\nconst List = props => {\r\n    return (\r\n        props.users.map(user => <ListItem content={user} key={user.id} />)\r\n    )\r\n}\r\n\r\nexport default List;","import React from 'react';\r\n\r\nconst Buttons = props => {\r\n\r\n    return (\r\n        <div className=\"buttonsWrapper\">\r\n            <button value='both' onClick={props.click}>Show all</button>\r\n            <button value='male' onClick={props.click}>Show male</button>\r\n            <button value='female' onClick={props.click}>Show female</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Buttons;","import React, { Component } from 'react';\nimport './App.css';\nimport List from './List';\nimport Buttons from './Buttons';\n\nclass App extends Component {\n  state = {\n    users: this.props.data.users\n  }\n\n\n  handleClick = e => {\n    let users = this.props.data.users;\n    if (e.target.value === 'female') {\n      users = users.filter(user => user.sex === 'female')\n    } else if (e.target.value === 'male') {\n      users = users.filter(user => user.sex === 'male')\n    }\n    this.setState(prevState => ({\n      users\n    }))\n  }\n\n  render() {\n    return (\n      <>\n        <Buttons click={this.handleClick} />\n        <List users={this.state.users} />\n      </>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nconst data = {\n    users: [\n        {\n            id: 1,\n            name: 'Pawel',\n            sex: 'male',\n            age: 31\n        },\n        {\n            id: 2,\n            name: 'Zosia',\n            sex: 'female',\n            age: 4.5\n        },\n        {\n            id: 3,\n            name: 'Brian',\n            sex: 'male',\n            age: 87\n        },\n        {\n            id: 4,\n            name: 'Nika',\n            sex: 'female',\n            age: 56\n        }\n    ]\n}\n\nReactDOM.render(<App data={data} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}