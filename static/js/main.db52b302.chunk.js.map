{"version":3,"sources":["components/Button.js","components/Number.js","components/Buy.js","components/App.js","serviceWorker.js","index.js"],"names":["Button","props","btn","text","order","stock","react_default","a","createElement","Fragment","disabled","onClick","click","Number","style","opacity","Buy","App","state","handleClick","type","_this","setState","prevState","handleBuy","_this$state","this","components_Button","bind","components_Number","components_Buy","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAeeA,SAbA,SAAAC,GAEX,IAEMC,EAAe,MAFRD,EAAME,KAEyB,IAAhBF,EAAMG,MAA8BH,EAAMG,QAAUH,EAAMI,MAEtF,OACIC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACIH,EAAAC,EAAAC,cAAA,UAAQE,SAAUR,EAAKS,QAASV,EAAMW,OAAQX,EAAME,SCAjDU,EARA,SAAAZ,GACX,OACIK,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACIH,EAAAC,EAAAC,cAAA,OAAKM,MAAOb,EAAMG,MAAQ,EAAI,GAAK,CAAEW,QAAS,KAAOd,EAAMG,SCKxDY,EARH,SAAAf,GACR,OACIK,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACIH,EAAAC,EAAAC,cAAA,UAAQG,QAASV,EAAMW,OAAvB,SCiDGK,6MA/CbC,MAAQ,CACNb,MAAO,GACPD,MAAO,KAGTe,YAAc,SAACC,GACA,aAATA,EACFC,EAAKC,SAAS,SAAAC,GAAS,MAAK,CAC1BnB,MAAOmB,EAAUnB,MAAQ,KAET,QAATgB,GACTC,EAAKC,SAAS,SAAAC,GAAS,MAAK,CAC1BnB,MAAOmB,EAAUnB,MAAQ,QAK/BoB,UAAY,WACVH,EAAKC,SAAS,SAAAC,GAAS,MAAK,CAC1BlB,MAAOkB,EAAUlB,MAAQkB,EAAUnB,MACnCA,MAAO,8EAIF,IAAAqB,EACkBC,KAAKR,MAAtBd,EADDqB,EACCrB,MAAOC,EADRoB,EACQpB,MACf,OACEC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACEH,EAAAC,EAAAC,cAACmB,EAAD,CACExB,KAAK,IACLC,MAAOA,EACPC,MAAOA,EACPO,MAAOc,KAAKP,YAAYS,KAAKF,KAAM,cAErCpB,EAAAC,EAAAC,cAACqB,EAAD,CAAQzB,MAAOA,IACfE,EAAAC,EAAAC,cAACmB,EAAD,CACExB,KAAK,IACLC,MAAOA,EACPC,MAAOA,EACPO,MAAOc,KAAKP,YAAYS,KAAKF,KAAM,SAEpCtB,EAAQ,GAAKE,EAAAC,EAAAC,cAACsB,EAAD,CAAKlB,MAAOc,KAAKF,oBA1CrBO,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhC,EAAAC,EAAAC,cAAC+B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.db52b302.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Button = props => {\r\n\r\n    const text = props.text;\r\n\r\n    const btn = text === '-' ? (props.order === 0 ? true : false) : props.order === props.stock ? true : false;\r\n\r\n    return (\r\n        <>\r\n            <button disabled={btn} onClick={props.click}>{props.text}</button>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Button;","import React from 'react';\r\n\r\nconst Number = props => {\r\n    return (\r\n        <>\r\n            <div style={props.order > 0 ? {} : { opacity: .3 }}>{props.order}</div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Number;","import React from 'react';\r\n\r\nconst Buy = props => {\r\n    return (\r\n        <>\r\n            <button onClick={props.click}>Buy</button>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Buy;","import React, { Component } from 'react';\nimport './App.css';\nimport Button from './Button';\nimport Number from './Number';\nimport Buy from './Buy';\n\nclass App extends Component {\n  state = {\n    stock: 10,\n    order: 1\n  }\n\n  handleClick = (type) => {\n    if (type === 'subtract') {\n      this.setState(prevState => ({\n        order: prevState.order - 1\n      }));\n    } else if (type === 'add') {\n      this.setState(prevState => ({\n        order: prevState.order + 1\n      }));\n    }\n  }\n\n  handleBuy = () => {\n    this.setState(prevState => ({\n      stock: prevState.stock - prevState.order,\n      order: 0\n    }));\n  }\n\n  render() {\n    const { order, stock } = this.state;\n    return (\n      <>\n        <Button\n          text='-'\n          order={order}\n          stock={stock}\n          click={this.handleClick.bind(this, 'subtract')}\n        />\n        <Number order={order} />\n        <Button\n          text='+'\n          order={order}\n          stock={stock}\n          click={this.handleClick.bind(this, 'add')}\n        />\n        {order > 0 && <Buy click={this.handleBuy} />}\n      </>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}