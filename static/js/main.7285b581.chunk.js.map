{"version":3,"sources":["components/Header.js","components/Form.js","components/Display.js","components/App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","Form","props","onSubmit","submit","htmlFor","type","id","onChange","change","checked","ageEnough","Display","Fragment","isSubmitted","App","state","handleChange","_this","setState","prevState","handleSubmit","e","preventDefault","_this$state","this","components_Header","components_Form","components_Display","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAUeA,SARA,WACX,OACIC,EAAAC,EAAAC,cAAA,cACIF,EAAAC,EAAAC,cAAA,2DCeGC,EAlBF,SAAAC,GACT,OACIJ,EAAAC,EAAAC,cAAA,QAAMG,SAAUD,EAAME,QAClBN,EAAAC,EAAAC,cAAA,SAAOK,QAAQ,OACXP,EAAAC,EAAAC,cAAA,SACIM,KAAK,WACLC,GAAG,MACHC,SAAUN,EAAMO,OAChBC,QAASR,EAAMS,YALvB,sBASAb,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,8BCHGY,EAVC,SAAAV,GAGZ,OACIJ,EAAAC,EAAAC,cAAAF,EAAAC,EAAAc,SAAA,KACKX,EAAMY,YAAchB,EAAAC,EAAAC,cAAA,SAAIE,EAAMS,UAJf,8CACA,6CAGoE,OCoCjFI,6MAnCbC,MAAQ,CACNL,WAAW,EACXG,aAAa,KAGfG,aAAe,WACbC,EAAKC,SAAS,SAAAC,GAAS,MAAK,CAC1BT,WAAYS,EAAUT,UACtBG,aAAa,QAIjBO,aAAe,SAAAC,GACbA,EAAEC,iBACFL,EAAKC,SAAS,SAAAC,GAAS,MAAK,CAC1BN,aAAa,8EAIR,IAAAU,EAC4BC,KAAKT,MAAhCL,EADDa,EACCb,UAAWG,EADZU,EACYV,YACnB,OACEhB,EAAAC,EAAAC,cAAAF,EAAAC,EAAAc,SAAA,KACEf,EAAAC,EAAAC,cAAC0B,EAAD,MACA5B,EAAAC,EAAAC,cAAC2B,EAAD,CACElB,OAAQgB,KAAKR,aACbb,OAAQqB,KAAKJ,aACbV,UAAWA,IAEbb,EAAAC,EAAAC,cAAC4B,EAAD,CAASjB,UAAWA,EAAWG,YAAaA,YA9BlCe,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtC,EAAAC,EAAAC,cAACqC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.7285b581.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header>\r\n            <h1>Buy a ticket for the horror of the year!!!</h1>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nconst Form = props => {\r\n    return (\r\n        <form onSubmit={props.submit}>\r\n            <label htmlFor=\"age\">\r\n                <input\r\n                    type=\"checkbox\"\r\n                    id=\"age\"\r\n                    onChange={props.change}\r\n                    checked={props.ageEnough}\r\n                />\r\n                I am 16 years old.\r\n            </label>\r\n            <br />\r\n            <button>Buy ticket</button>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default Form;","import React from 'react';\r\n\r\nconst Display = props => {\r\n    const positiveMessage = 'You are old enough, you can buy the ticket.';\r\n    const negativeMessage = 'You are too young, you are not coming in.';\r\n    return (\r\n        <>\r\n            {props.isSubmitted ? <p>{props.ageEnough ? positiveMessage : negativeMessage}</p> : null}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Display;","import React, { Component } from 'react';\nimport './App.css';\nimport Header from './Header';\nimport Form from './Form';\nimport Display from './Display';\n\n\nclass App extends Component {\n  state = {\n    ageEnough: false,\n    isSubmitted: false\n  }\n\n  handleChange = () => {\n    this.setState(prevState => ({\n      ageEnough: !prevState.ageEnough,\n      isSubmitted: false\n    }));\n  }\n\n  handleSubmit = e => {\n    e.preventDefault();\n    this.setState(prevState => ({\n      isSubmitted: true\n    }));\n  }\n\n  render() {\n    const { ageEnough, isSubmitted } = this.state;\n    return (\n      <>\n        <Header />\n        <Form\n          change={this.handleChange}\n          submit={this.handleSubmit}\n          ageEnough={ageEnough}\n        />\n        <Display ageEnough={ageEnough} isSubmitted={isSubmitted} />\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}